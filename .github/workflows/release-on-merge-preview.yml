name: Release on merge → preview (auto notes)

on:
  pull_request:
    types: [ closed ]
    branches: [ preview ]

permissions:
  contents: write

concurrency:
  group: release-on-merge-preview
  cancel-in-progress: false

jobs:
  make-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Create pre-release with auto-generated notes
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr = context.payload.pull_request;
            if (!pr) {
              core.setFailed('This job must be triggered by a pull_request event.');
              return;
            }

            const baseBranch = pr.base.ref;   // preview
            const headBranch = pr.head.ref;   // usually dev
            const prNumber   = pr.number;

            // 1) Find latest tag/release
            let previousTag = null;
            try {
              const latest = await github.rest.repos.getLatestRelease({ owner, repo });
              previousTag = latest.data.tag_name;
              core.info(`Latest release: ${previousTag}`);
            } catch (e) {
              core.warning(`No published release yet: ${e.message}`);
            }

            // 2) Determine next tag using PR labels: release:major|minor|patch (default: patch)
            const label = (pr.labels || []).map(l => l.name)
              .find(n => /^release:(major|minor|patch)$/.test(n)) || 'release:patch';

            const bump = (tag, type) => {
              if (!tag || !/^v?\d+\.\d+\.\d+$/.test(tag)) return 'v0.1.0';
              const [M,m,p] = tag.replace(/^v/,'').split('.').map(Number);
              if (type.endsWith('major')) return `v${M+1}.0.0`;
              if (type.endsWith('minor')) return `v${M}.${m+1}.0`;
              return `v${M}.${m}.${p+1}`;
            };
            const nextTag = bump(previousTag, label);

            // 3) Auto-generated release notes (fallback to compare)
            let notesBody = '';
            try {
              const rn = await github.rest.repos.generateReleaseNotes({
                owner, repo,
                tag_name: nextTag,
                target_commitish: baseBranch,
                ...(previousTag ? { previous_tag_name: previousTag } : {})
              });
              notesBody = rn.data.body || '';
            } catch (e) {
              core.warning(`generateReleaseNotes failed → fallback to compare: ${e.message}`);
              const base = previousTag ?? `${baseBranch}~1`;
              const cmp  = await github.rest.repos.compareCommits({ owner, repo, base, head: baseBranch });
              notesBody  = (cmp.data.commits || [])
                .map(c => `- ${c.commit.message.split('\n')[0]} (${c.sha.slice(0,7)})`)
                .join('\n') || 'No changes detected.';
            }

            // 4) Create pre-release
            const title = nextTag; // release title = vX.Y.Z
            const body  = `**Source PR**: #${prNumber}\n**Branch**: \`${baseBranch}\` (from \`${headBranch}\`)\n\n---\n\n${notesBody}`;

            const rel = await github.rest.repos.createRelease({
              owner, repo,
              tag_name: nextTag,
              name: title,
              body,
              target_commitish: baseBranch,
              draft: false,
              prerelease: true
            });
            core.info(`Pre-release created: ${rel.data.html_url}`);
