name: Auto PR preview ‚Üí main

on:
  push:
    branches: [ preview ]
  pull_request:
    types: [ closed ]
    branches: [ preview ]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: auto-pr-preview-to-main
  cancel-in-progress: false

jobs:
  open-pr:
    # Les triggers filtrent d√©j√† la branche; on garde "merged == true" pour le cas PR
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      - name: Ouvrir/mettre √† jour la PR preview ‚Üí main (body √©cras√©, pas de doublons)
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const head = 'preview';
            const base = 'main';

            // 1) Diff r√©el main...preview
            const compare = await github.rest.repos.compareCommits({ owner, repo, base, head });
            const commits = compare.data.commits || [];
            if (commits.length === 0) {
              core.info(`Aucun diff entre ${base} et ${head} ‚Äî pas de PR √† cr√©er.`);
              return;
            }

            // 2) Regroupement Conventional Commits
            const groups = { feat:[], fix:[], perf:[], refactor:[], docs:[], test:[], build:[], ci:[], chore:[], other:[] };
            const extract = (msg) => {
              const m = msg.match(/^(\w+)(\([\w\-\.]+\))?(!)?:\s+(.+)/);
              const type = m?.[1]?.toLowerCase();
              const subject = (m?.[4] ?? msg).split('\n')[0].trim();
              return { type, subject };
            };
            const prRef = (msg) => {
              const m = msg.match(/\(#(\d+)\)/);
              return m ? ` #${m[1]}` : '';
            };

            for (const c of commits) {
              const { type, subject } = extract(c.commit.message);
              const line = `- ${subject}${prRef(c.commit.message)}`;
              if (type && groups[type]) groups[type].push(line);
              else groups.other.push(line);
            }

            const order  = ['feat','fix','perf','refactor','docs','test','build','ci','chore','other'];
            const titles = {
              feat:'‚ú® Features', fix:'üêû Fixes', perf:'‚ö°Ô∏è Performance', refactor:'‚ôªÔ∏è Refactor',
              docs:'üìù Docs', test:'‚úÖ Tests', build:'üèó Build', ci:'ü§ñ CI', chore:'üßπ Chore', other:'üîπ Others'
            };
            const sections = order
              .filter(k => groups[k].length)
              .map(k => `### ${titles[k]}\n${groups[k].join('\n')}`)
              .join('\n\n');

            const changelog = `## Changelog (${head} ‚Üí ${base})\n\n${sections}`;

            // 3) Bloc unique (avec empreinte DIFF ‚Äì informatif)
            const START  = '<!-- AUTO-PR-CHANGELOG:START -->';
            const END    = '<!-- AUTO-PR-CHANGELOG:END -->';
            const DIFF   = `<!-- AUTO-PR-DIFF:${commits.map(c => c.sha).join(',')} -->`;
            const footer = '\n\n> Changelog g√©n√©r√© automatiquement (GitHub Actions).';
            const section = `${START}\n${DIFF}\n${changelog}\n${footer}\n${END}`;

            const title  = 'chore: promote preview ‚Üí main';

            // 4) PR existante ?
            const openPRs = await github.paginate(
              github.rest.pulls.list,
              { owner, repo, state: 'open', head: `${owner}:${head}`, base }
            );

            if (openPRs.length > 0) {
              const current = openPRs[0];

              // ‚úÖ √âCRASE le body pour √©viter toute duplication
              const newBody = section;

              if ((current.body ?? '') !== newBody) {
                await github.rest.pulls.update({
                  owner, repo, pull_number: current.number, title, body: newBody
                });
                core.info(`PR mise √† jour (body √©cras√©): #${current.number} (${current.html_url})`);
              } else {
                core.info('PR d√©j√† √† jour, aucune modification.');
              }
              return;
            }

            // 5) Cr√©er la PR avec le bloc directement
            const body = section;
            const pr = await github.rest.pulls.create({
              owner, repo, title, head, base, body, draft: false, maintainer_can_modify: true
            });
            core.info(`PR cr√©√©e: #${pr.data.number} (${pr.data.html_url})`);

            try {
              await github.rest.issues.addLabels({
                owner, repo, issue_number: pr.data.number, labels: ['automation']
              });
            } catch (e) {
              core.warning(`Label non ajout√© (optionnel): ${e.message}`);
            }
