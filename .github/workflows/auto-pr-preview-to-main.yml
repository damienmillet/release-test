name: Auto PR preview ‚Üí main

on:
  push:
    branches: [ preview ]
  pull_request:
    types: [ closed ]
    branches: [ preview ]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: auto-pr-preview-to-main
  cancel-in-progress: false

jobs:
  open-pr:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      - name: Ouvrir/mettre √† jour la PR preview ‚Üí main (changelog group√©)
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const head = 'preview';
            const base = 'main';

            const compare = await github.rest.repos.compareCommits({ owner, repo, base, head });
            const commits = compare.data.commits || [];
            if (commits.length === 0) {
              core.info(`Aucun diff entre ${base} et ${head} ‚Äî pas de PR √† cr√©er.`);
              return;
            }

            const groups = { feat:[], fix:[], perf:[], refactor:[], docs:[], test:[], build:[], ci:[], chore:[], other:[] };
            const extract = (msg) => {
              const m = msg.match(/^(\w+)(\([\w\-\.]+\))?(!)?:\s+(.+)/);
              const type = m?.[1]?.toLowerCase();
              const subject = (m?.[4] ?? msg).split('\n')[0].trim();
              return { type, subject };
            };
            const prRef = (msg) => (msg.match(/\(#(\d+)\)/)?.[1] ? ` #${msg.match(/$begin:math:text$#(\\d+)$end:math:text$/)[1]}` : '');

            for (const c of commits) {
              const { type, subject } = extract(c.commit.message);
              const line = `- ${subject}${prRef(c.commit.message)}`;
              if (type && groups[type]) groups[type].push(line);
              else groups.other.push(line);
            }

            const order  = ['feat','fix','perf','refactor','docs','test','build','ci','chore','other'];
            const titles = { feat:'‚ú® Features', fix:'üêû Fixes', perf:'‚ö°Ô∏è Performance', refactor:'‚ôªÔ∏è Refactor', docs:'üìù Docs', test:'‚úÖ Tests', build:'üèó Build', ci:'ü§ñ CI', chore:'üßπ Chore', other:'üîπ Others' };
            const sections = order.filter(k => groups[k].length).map(k => `### ${titles[k]}\n${groups[k].join('\n')}`).join('\n\n');

            const changelog = `## Changelog (${head} ‚Üí ${base})\n\n_Comparaison_: \`${base}...${head}\`\n\n${sections}`;

            const START = '<!-- AUTO-PR-CHANGELOG:START -->';
            const END   = '<!-- AUTO-PR-CHANGELOG:END -->';
            const footer = '\n\n> Changelog regroup√© automatiquement (GitHub Actions).';
            const section = `${START}\n${changelog}\n${footer}\n${END}`;

            const title  = 'chore: promote preview ‚Üí main';

            const openPRs = await github.paginate(github.rest.pulls.list, { owner, repo, state: 'open', head: `${owner}:${head}`, base });

            if (openPRs.length > 0) {
              const current = openPRs[0];
              const prev = current.body ?? '';
              const hasBlock = prev.includes(START) && prev.includes(END);
              const newBody = hasBlock ? prev.replace(new RegExp(`${START}[\\s\\S]*?${END}`,'m'), section) : `${section}\n\n${prev}`;

              if (newBody.trim() !== prev.trim()) {
                await github.rest.pulls.update({ owner, repo, pull_number: current.number, title, body: newBody });
                core.info(`PR mise √† jour: #${current.number} (${current.html_url})`);
              } else {
                core.info(`PR d√©j√† √† jour, aucune modification.`);
              }
              return;
            }

            const body = section;
            const pr = await github.rest.pulls.create({ owner, repo, title, head, base, body, draft: false, maintainer_can_modify: true });
            core.info(`PR cr√©√©e: #${pr.data.number} (${pr.data.html_url})`);

            try {
              await github.rest.issues.addLabels({ owner, repo, issue_number: pr.data.number, labels: ['automation'] });
            } catch (e) {
              core.warning(`Label non ajout√© (optionnel): ${e.message}`);
            }
