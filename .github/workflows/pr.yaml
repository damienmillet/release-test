# .github/workflows/auto-pr-dev-to-preview.yml
name: Auto PR dev ‚Üí preview (with changelog)

on:
  push:
    branches: [ dev ]
  pull_request:
    types: [closed]
    branches: [ dev ]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: auto-pr-dev-to-preview
  cancel-in-progress: false

jobs:
  open-pr:
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/dev')) ||
      (github.event_name == 'pull_request' &&
       github.event.pull_request.merged == true &&
       github.base_ref == 'dev')
    runs-on: ubuntu-latest
    steps:
      - name: Pr√©parer le changelog et ouvrir/mettre √† jour la PR dev ‚Üí preview
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const head = 'dev';
            const base = 'preview';

            // --- 1) G√©n√©rer le changelog √† partir de preview...dev (API compare)
            // Docs REST "Compare two commits"
            const compare = await github.rest.repos.compareCommits({
              owner, repo, base, head
            });

            // Regroupe par type "conventional commits"
            const groups = {
              feat: [], fix: [], perf: [], refactor: [],
              docs: [], test: [], build: [], chore: [], ci: [], other: []
            };

            const extract = (msg) => {
              //  type(scope)!: subject   | subject (#123)
              const m = msg.match(/^(\w+)(\([\w\-\.]+\))?(!)?:\s+(.+)/);
              const type = m?.[1]?.toLowerCase();
              const subject = (m?.[4] ?? msg).split('\n')[0].trim();
              return { type, subject };
            };

            const prRef = (msg) => {
              const m = msg.match(/\(#(\d+)\)/);
              return m ? ` #${m[1]}` : '';
            };

            for (const c of compare.data.commits) {
              const { type, subject } = extract(c.commit.message);
              const line = `- ${subject}${prRef(c.commit.message)}`;
              if (type && groups[type]) groups[type].push(line);
              else groups.other.push(line);
            }

            const order = ['feat','fix','perf','refactor','docs','test','build','ci','chore','other'];
            const titles = {
              feat: '‚ú® Features', fix: 'üêû Fixes', perf: '‚ö°Ô∏è Performance', refactor: '‚ôªÔ∏è Refactor',
              docs: 'üìù Docs', test: '‚úÖ Tests', build: 'üèó Build', ci: 'ü§ñ CI', chore: 'üßπ Chore', other: 'üîπ Others'
            };

            const sections = order
              .filter(k => groups[k].length)
              .map(k => `### ${titles[k]}\n${groups[k].join('\n')}`)
              .join('\n\n');

            const changelog = sections
              ? `## Changelog (dev ‚Üí preview)\n\n_Comparaison_: \`${base}...${head}\`\n\n${sections}`
              : '## Changelog (dev ‚Üí preview)\n\n_Aucun commit diff√©rentiel._';

            // --- 2) V√©rifier s‚Äôil existe d√©j√† une PR ouverte dev ‚Üí preview
            const openPRs = await github.paginate(
              github.rest.pulls.list,
              { owner, repo, state: 'open', head: `${owner}:${head}`, base }
            );

            const title = 'chore: sync dev ‚Üí preview';
            const footer = '\n\n> Changelog g√©n√©r√© automatiquement via GitHub Actions.';

            if (openPRs.length > 0) {
              const current = openPRs[0];
              // Met √† jour le body en pr√©servant du texte √©ventuel, en pr√©fixant le changelog
              const newBody = `${changelog}\n\n---\n${current.body ?? ''}${footer}`;
              await github.rest.pulls.update({
                owner, repo, pull_number: current.number, title, body: newBody
              });
              core.info(`PR mise √† jour: #${current.number} (${current.html_url})`);
              return;
            }

            // --- 3) Cr√©er la PR avec le changelog inject√©
            const body = `${changelog}\n\n- Source: \`${head}\`\n- Cible: \`${base}\`\n${footer}`;
            const pr = await github.rest.pulls.create({
              owner, repo, title, head, base, body, draft: false, maintainer_can_modify: true
            });

            core.info(`PR cr√©√©e: #${pr.data.number} (${pr.data.html_url})`);

            // (Optionnel) Label
            try {
              await github.rest.issues.addLabels({
                owner, repo, issue_number: pr.data.number, labels: ['automation']
              });
            } catch (e) {
              core.warning(`Labels non ajout√©s (optionnel): ${e.message}`);
            }
